import tech.tablesaw.api.Table
import tech.tablesaw.selection.Selection
import tech.tablesaw.aggregate.AggregateFunctions
import java.util.stream.Collectors

xaw etablesaw.ui.examples.scratch2

val Map<String, Collection<String>> emneEmnekategorier = newHashMap 
val Map<String, Collection<String>> emnekategoriEmner = newHashMap

val emnekategoriTable = importTable("BIT-MTDT-kodet.csv") => # emnekategoriTable : String Emnekode, String Fagkrets, String Emnegruppe # 
for (row : emnekategoriTable.rows) {
	emneEmnekategorier.put(row.emnekode, newArrayList(row.fagkrets))
	if (emnekategoriEmner.containsKey(row.fagkrets)) {
		emnekategoriEmner.get(row.fagkrets).add(row.emnekode)
	} else {
		emnekategoriEmner.put(row.fagkrets, newArrayList(row.emnekode))
	}
	if (row.emnegruppe !== null && row.emnegruppe.length > 0) {
		emneEmnekategorier.get(row.emnekode).add(row.emnegruppe)
		if (emnekategoriEmner.containsKey(row.emnegruppe)) {
			emnekategoriEmner.get(row.emnegruppe).add(row.emnekode)
		} else {
			emnekategoriEmner.put(row.emnegruppe, newArrayList(row.emnekode))
		}
	}
}

val Map<String, EmneData> emnerData = newHashMap
val Map<String, EmnekategoriData> emnekategorierData = newHashMap
val Map<String, Iterable<EmnekategoriData>> emneEmnekategorierData = newHashMap
emneEmnekategorier.keySet.forEach[
	emnerData.put(it, new EmneData(it))
	val emnekategorier = emneEmnekategorier.get(it)
	emneEmnekategorierData.put(it, emnekategorier.map[
		var emnekategoriData = emnekategorierData.get(it)
		if (emnekategoriData === null) {
			emnekategoriData = new EmnekategoriData(it)
			emnekategorierData.put(it, emnekategoriData)
		}
		emnekategoriData
	])
]
System.out.println(emnerData)
System.out.println(emneEmnekategorierData)

val relevantExams = (importTable("BIT+MTDT-exams-anon.csv") => new ExamsAnon_GradeTable("relevantExams") & [arstall > 2010])
					.sortOn("studentnr", "emnekode", "arstall")
					as ExamsAnon_GradeTable

def isIndividual(Collection<String> kategorier) {
	kategorier.size > 1 || kategorier.contains("IT")
}

// one row pr. student
val studentCount = relevantExams.studentnrColumn.countUnique
val crossTab = # crossTab : int studentnr, int year #
(0 ..< studentCount).forEach[
	crossTab.studentnrColumn.appendMissing
	crossTab.yearColumn.appendMissing
]
emneEmnekategorier.entrySet.filter[isIndividual(value)].forEach[EmneData.addColumnsToTable(crossTab, studentCount, it.key)]
emnekategoriEmner.keySet.forEach[EmneData.addColumnsToTable(crossTab, studentCount, it)]

var lastStudentnr = 0
val studentEmner = <EmneData> newHashSet
val studentKategorier = <EmneData> newHashSet

var studentNum = 0 - 1
for (row : relevantExams.rows) {
	if (row.studentnr !== lastStudentnr) {
		// update row for last student
		val pos = studentNum
		if (pos >= 0) {
			studentEmner.forEach[emneData |
				emneData.updateColumns(crossTab, pos)
				emneEmnekategorierData.get(emneData.emnekode).forEach[
					updateData(emneData)
					studentKategorier += it
				]
				emneData.clear				
			]
			studentKategorier.forEach[emnekategoriData |
				emnekategoriData.updateColumns(crossTab, pos)
			]
		}
		studentEmner.clear
		studentKategorier.clear
		// set row for new student
		studentNum++
		crossTab.studentnrColumn.set(studentNum, row.studentnr)
		crossTab.yearColumn.set(studentNum, row.arstall)
		lastStudentnr = row.studentnr
	}
	// update counters for this row
	val emneData = emnerData.get(row.emnekode)
	if (emneData !== null) {
		val emnekategorier = emneEmnekategorier.get(emneData.emnekode)
		if (isIndividual(emnekategorier)) {
			emneData.updateData(row)
//			System.out.println("Updated emne: " + emneData)
			studentEmner += emneData
		}
	}
}
studentEmner.forEach[emneData |
	emneData.updateColumns(crossTab, crossTab.studentnrColumn.size - 1)
	emneEmnekategorierData.get(emneData.emnekode).forEach[
		updateData(emneData)
		studentKategorier += it
	]
	emneData.clear				
]
studentKategorier.forEach[emnekategoriData |
	emnekategoriData.updateColumns(crossTab, crossTab.studentnrColumn.size - 1)
]
System.out.println(crossTab)

exportTables(relevantExams, crossTab)
