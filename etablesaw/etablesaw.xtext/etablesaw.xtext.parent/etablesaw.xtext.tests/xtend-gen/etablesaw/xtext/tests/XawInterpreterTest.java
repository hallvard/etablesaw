/**
 * generated by Xtext 2.12.0
 */
package etablesaw.xtext.tests;

import com.google.inject.Inject;
import etablesaw.xtext.jvmmodel.XawInterpreter;
import etablesaw.xtext.tests.XawInjectorProvider;
import etablesaw.xtext.xaw.Xaw;
import java.util.Map;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.interpreter.IEvaluationResult;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import tech.tablesaw.api.Table;

@RunWith(XtextRunner.class)
@InjectWith(XawInjectorProvider.class)
@SuppressWarnings("all")
public class XawInterpreterTest {
  @Inject
  @Extension
  private ParseHelper<Xaw> _parseHelper;
  
  @Inject
  private XawInterpreter interpreter;
  
  @Test
  public void interpretModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("xaw etablesaw.xtext.tests.InterpretModelTest");
      _builder.newLine();
      _builder.append("val halAge = 52.0");
      _builder.newLine();
      _builder.append("val table1 =");
      _builder.newLine();
      _builder.append("#table2: String name, double age #");
      _builder.newLine();
      _builder.append("| \"Hallvard\", halAge |");
      _builder.newLine();
      _builder.append("val table2 =");
      _builder.newLine();
      _builder.append("#table3: String name, double age #");
      _builder.newLine();
      _builder.append("| \"Hallvard\", halAge + 1 |");
      _builder.newLine();
      _builder.append("val table3 = # String name = table1.column(\"name\"), double age = table2.column(\"age\")#");
      _builder.newLine();
      _builder.append("table3");
      _builder.newLine();
      final Xaw model = this._parseHelper.parse(_builder);
      final IEvaluationResult result = this.interpreter.evaluate(model);
      Object _result = result.getResult();
      Assert.assertTrue((_result instanceof Table));
      Object _result_1 = result.getResult();
      final Table table = ((Table) _result_1);
      Assert.assertEquals(1, IterableExtensions.size(table));
      Assert.assertEquals(2, table.columnCount());
      Assert.assertEquals("Hallvard", table.column(0).get(0));
      Assert.assertEquals(Double.valueOf(53), table.column(1).get(0));
      final Map<String, Table> tables = ((XawInterpreter) this.interpreter).getTopLevelTables();
      Assert.assertEquals(2, tables.size());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
