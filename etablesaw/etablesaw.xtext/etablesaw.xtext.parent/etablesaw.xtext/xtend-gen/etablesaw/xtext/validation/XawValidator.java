/**
 * generated by Xtext 2.12.0
 */
package etablesaw.xtext.validation;

import etablesaw.xtext.jvmmodel.XawCompiler;
import etablesaw.xtext.validation.AbstractXawValidator;
import etablesaw.xtext.xaw.InlineTableRow;
import etablesaw.xtext.xaw.TableLiteral;
import etablesaw.xtext.xaw.XLocalDateLiteral;
import etablesaw.xtext.xaw.XLocalTimeLiteral;
import etablesaw.xtext.xaw.XURLLiteral;
import etablesaw.xtext.xaw.XawPackage;
import java.net.URI;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Month;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class XawValidator extends AbstractXawValidator {
  @Override
  protected boolean isValueExpectedRecursive(final XExpression expr) {
    boolean _xblockexpression = false;
    {
      final EObject parent = expr.eContainer();
      if (((parent instanceof InlineTableRow) || (parent.eContainer() instanceof TableLiteral))) {
        return true;
      }
      _xblockexpression = super.isValueExpectedRecursive(expr);
    }
    return _xblockexpression;
  }
  
  public void checkInt(final int i, final int min, final int max, final String prop, final EStructuralFeature feature) {
    if (((i < min) || (i > max))) {
      this.error(((((prop + " must be between ") + Integer.valueOf(min)) + " and ") + Integer.valueOf(max)), feature);
    }
  }
  
  public void checkMonth(final String dateMonth) {
    try {
      final Integer month = Integer.valueOf(dateMonth);
      if ((((month).intValue() < 1) || ((month).intValue() > 12))) {
        this.error("Month must be between 1 and 12", XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH);
      }
    } catch (final Throwable _t) {
      if (_t instanceof NumberFormatException) {
        try {
          final Month month_1 = Month.valueOf(dateMonth.toUpperCase());
          if ((month_1 == null)) {
            this.error("Month must be one of the java.time.Month enums", XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH);
          }
        } catch (final Throwable _t_1) {
          if (_t_1 instanceof RuntimeException) {
            this.error("Month must be one of the java.time.Month enums", XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH);
          } else {
            throw Exceptions.sneakyThrow(_t_1);
          }
        }
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  @Check
  public LocalTime checkTime(final XLocalTimeLiteral time) {
    LocalTime _xblockexpression = null;
    {
      this.checkInt(time.getHour(), 0, 23, "Hour", XawPackage.Literals.XLOCAL_TIME_LITERAL__HOUR);
      this.checkInt(time.getMin(), 0, 59, "Min", XawPackage.Literals.XLOCAL_TIME_LITERAL__MIN);
      this.checkInt(time.getSecond(), 0, 59, "Second", XawPackage.Literals.XLOCAL_TIME_LITERAL__SECOND);
      LocalTime _xtrycatchfinallyexpression = null;
      try {
        _xtrycatchfinallyexpression = XawCompiler.createLocalTime(time);
      } catch (final Throwable _t) {
        if (_t instanceof RuntimeException) {
          final RuntimeException e = (RuntimeException)_t;
          this.error(e.getMessage(), null);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      _xblockexpression = _xtrycatchfinallyexpression;
    }
    return _xblockexpression;
  }
  
  @Check
  public LocalDate checkDate(final XLocalDateLiteral date) {
    LocalDate _xblockexpression = null;
    {
      this.checkMonth(date.getMonth());
      this.checkInt(date.getDay(), 1, 31, "Day", XawPackage.Literals.XLOCAL_DATE_LITERAL__DAY);
      LocalDate _xtrycatchfinallyexpression = null;
      try {
        _xtrycatchfinallyexpression = XawCompiler.createLocalDate(date);
      } catch (final Throwable _t) {
        if (_t instanceof RuntimeException) {
          final RuntimeException e = (RuntimeException)_t;
          this.error(e.getMessage(), null);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      _xblockexpression = _xtrycatchfinallyexpression;
    }
    return _xblockexpression;
  }
  
  @Check
  public URI checkURL(final XURLLiteral url) {
    try {
      URI _xtrycatchfinallyexpression = null;
      try {
        _xtrycatchfinallyexpression = XawCompiler.createURI(url);
      } catch (final Throwable _t) {
        if (_t instanceof RuntimeException) {
          final RuntimeException e = (RuntimeException)_t;
          this.error(e.getMessage(), null);
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      return _xtrycatchfinallyexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
