grammar etablesaw.xtext.Xaw with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations" as xannotation

generate xaw "etablesaw/xtext/Xaw"

Xaw returns xbase::XBlockExpression :
	{ Xaw }
	(importSection = XImportSection)?
	'xaw' qName = QualifiedName
	(
		(tableDefs += TableDef) |
		(expressions += (XExpression | XVariableDeclaration)) |
		(methods += XMethod)
	)*
;

TableDef:
    'table' name = ValidID '{'
        (tableColumDefs += TableColumnDef (','? tableColumDefs += TableColumnDef)*)?
    '}'
;

TableColumnDef:
	type = JvmTypeReference name = (ValidID | STRING)
;

XMethod:
	'def'
	('<' typeParameters += JvmTypeParameter (',' typeParameters += JvmTypeParameter)* '>')?
	(returnType = JvmTypeReference)? name = ID
	'(' (parameters += FullJvmFormalParameter (',' parameters += FullJvmFormalParameter)*)? ')'
	body = XExpression
;

// Table syntax

TableLiteral returns xbase::XBlockExpression :
	{ TableLiteral }
	'#' (name = (ValidID | STRING) ':'?)?
	(expressions += TableColumn (',' expressions += TableColumn)*)?
	'#'
	(expressions += InlineTableRow)*
;

// Column syntax

TableColumn returns xbase::XExpression:
	{ TableColumn } (columnDef = TableColumnDef) ('=' expression = XExpression)?
;

// Row syntax

InlineTableRow returns xbase::XBlockExpression:
	{ InlineTableRow } (=>('|' (expressions += XExpression (',' expressions += XExpression)*)? '|'))
;

TableRowLiteral returns xbase::XExpression:
	{ TableRowLiteral } '#' '|' expressions += XExpression (',' expressions += XExpression)* '|' '#'
;

XLocalTimeLiteral returns xbase::XExpression:
	{XLocalTimeLiteral} '@' hour = INT ':' min = INT (':' second = INT)?
;

MONTH: INT | ID; // ("January" | "February" | "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December");

XLocalDateLiteral returns xbase::XExpression:
	{XLocalDateLiteral} '@' day = INT '-' month = MONTH '-' year = INT
;

HOST: (ID | INT) ('.' (ID | INT))+;
SEGMENT: (ID | INT) ('.' (ID | INT))*;
PATH: '/' (SEGMENT ('/' SEGMENT)*)? ;
FRAGMENT: (ID | INT);
PARAM: ID '=' (ID | INT);

XURLLiteral returns xbase::XExpression hidden():
	{XURLLiteral} ('@' ((url = STRING) | ((scheme = ID ':')? (host = HOST (':' port = INT)?)? path = PATH ('?' params += PARAM ('&' params += PARAM)*)? ('#' frag = FRAGMENT)?)))
;

// extend with extra casting operator

//@Override
//XUnaryOperation returns xbase::XExpression:
//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
//	| XCastedColumnExpression;
//
//XCastedColumnExpression returns xbase::XExpression:
//	XCastedExpression (=>({XCastedColumnExpression.target=current} 'of') type=JvmTypeReference)*
//;

// extend with | and & operator

@Override
OpMultiAssign:
    '+=' | '-=' | '*=' | '/=' | '%=' |
    '<' '<' '=' |
    '>' '>'? '>=' |
    '&=' | '|=';

@Override 
OpAnd: '&&';

@Override
XAndExpression returns xbase::XExpression:
    XSingleAndExpression (=>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd]) rightOperand=XSingleOrExpression)*;

OpSingleOr: '|';

XSingleOrExpression returns xbase::XExpression:
    XSingleAndExpression (=>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpSingleOr]) rightOperand=XSingleAndExpression)*;

OpSingleAnd: '&';

XSingleAndExpression returns xbase::XExpression:
    XEqualityExpression (=>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpSingleAnd]) rightOperand=XEqualityExpression)*;

// extend with ? operator

@Override 
OpMulti:
	'*' | '**' | '/' | '%'
	| '?' // eval operator
	;

//

@Override 
XLiteral returns xbase::XExpression:
	TableLiteral
	| TableRowLiteral
	| XLocalTimeLiteral | XLocalDateLiteral
	| XURLLiteral
	
	| XCollectionLiteral
	| XClosure
	| XBooleanLiteral
	| XNumberLiteral
	| XNullLiteral
	| XStringLiteral
	| XTypeLiteral
;
