/*
 * generated by Xtext 2.12.0
 */
package etablesaw.xtext.validation

import etablesaw.xtext.jvmmodel.XawCompiler
import etablesaw.xtext.xaw.InlineTableRow
import etablesaw.xtext.xaw.TableLiteral
import etablesaw.xtext.xaw.XLocalDateLiteral
import etablesaw.xtext.xaw.XLocalTimeLiteral
import etablesaw.xtext.xaw.XURLLiteral
import etablesaw.xtext.xaw.XawPackage
import java.time.Month
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.xbase.XExpression

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class XawValidator extends AbstractXawValidator {

	override protected isValueExpectedRecursive(XExpression expr) {
		val parent = expr.eContainer
		if (parent instanceof InlineTableRow || parent?.eContainer instanceof TableLiteral) {
			return true
		}
		super.isValueExpectedRecursive(expr)
	}

//	public static val INVALID_NAME = 'invalidName'
//
	def checkInt(int i, int min, int max, String prop, EStructuralFeature feature) {
		if (i < min || i > max) {
			error(prop + ' must be between ' + min + ' and ' + max, feature)
		}
	}

	def checkMonth(String dateMonth) {
		try {
			val month = Integer.valueOf(dateMonth)
			if (month < 1 || month > 12) {
				error('Month must be between 1 and 12', XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH)
			}
		}
		catch (NumberFormatException e) {
			try {
				val month = Month.valueOf(dateMonth.toUpperCase)
				if (month === null) {
					error('Month must be one of the java.time.Month enums', XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH)				
				}
			}
			catch (RuntimeException e2) {
				error('Month must be one of the java.time.Month enums', XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH)
			}
		}
	}

	@Check
	def checkTime(XLocalTimeLiteral time) {
		checkInt(time.hour, 0, 23, 'Hour', XawPackage.Literals.XLOCAL_TIME_LITERAL__HOUR)
		checkInt(time.min, 0, 59, 'Min', XawPackage.Literals.XLOCAL_TIME_LITERAL__MIN)
		checkInt(time.second, 0, 59, 'Second', XawPackage.Literals.XLOCAL_TIME_LITERAL__SECOND)
		try {
			XawCompiler.createLocalTime(time)
		}
		catch (RuntimeException e) {
			error(e.message, null)
		}
	}

	@Check
	def checkDate(XLocalDateLiteral date) {
		checkMonth(date.month)
		checkInt(date.day, 1, 31, 'Day', XawPackage.Literals.XLOCAL_DATE_LITERAL__DAY)
		try {
			XawCompiler.createLocalDate(date)
		}
		catch (RuntimeException e) {
			error(e.message, null)
		}
	}

	@Check
	def checkURL(XURLLiteral url) {
		try {
			XawCompiler.createURI(url)
		} catch (RuntimeException e) {
			error(e.message, null)
		}
	}
	
}
