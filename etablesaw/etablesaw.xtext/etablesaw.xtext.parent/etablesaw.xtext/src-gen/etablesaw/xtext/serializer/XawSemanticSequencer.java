/*
 * generated by Xtext 2.14.0
 */
package etablesaw.xtext.serializer;

import com.google.inject.Inject;
import etablesaw.xtext.services.XawGrammarAccess;
import etablesaw.xtext.xaw.InlineTableRow;
import etablesaw.xtext.xaw.TableColumn;
import etablesaw.xtext.xaw.TableColumnDef;
import etablesaw.xtext.xaw.TableDef;
import etablesaw.xtext.xaw.TableLiteral;
import etablesaw.xtext.xaw.TableRowLiteral;
import etablesaw.xtext.xaw.XCastedColumnExpression;
import etablesaw.xtext.xaw.XLocalDateLiteral;
import etablesaw.xtext.xaw.XLocalTimeLiteral;
import etablesaw.xtext.xaw.XMethod;
import etablesaw.xtext.xaw.XURLLiteral;
import etablesaw.xtext.xaw.XUnaryOperation;
import etablesaw.xtext.xaw.Xaw;
import etablesaw.xtext.xaw.XawPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.annotations.serializer.XbaseWithAnnotationsSemanticSequencer;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationElementValuePair;
import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotationsPackage;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;

@SuppressWarnings("all")
public class XawSemanticSequencer extends XbaseWithAnnotationsSemanticSequencer {

	@Inject
	private XawGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XAnnotationsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XAnnotationsPackage.XANNOTATION:
				sequence_XAnnotation(context, (XAnnotation) semanticObject); 
				return; 
			case XAnnotationsPackage.XANNOTATION_ELEMENT_VALUE_PAIR:
				sequence_XAnnotationElementValuePair(context, (XAnnotationElementValuePair) semanticObject); 
				return; 
			}
		else if (epackage == XawPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XawPackage.INLINE_TABLE_ROW:
				sequence_InlineTableRow(context, (InlineTableRow) semanticObject); 
				return; 
			case XawPackage.TABLE_COLUMN:
				sequence_TableColumn(context, (TableColumn) semanticObject); 
				return; 
			case XawPackage.TABLE_COLUMN_DEF:
				sequence_TableColumnDef(context, (TableColumnDef) semanticObject); 
				return; 
			case XawPackage.TABLE_DEF:
				sequence_TableDef(context, (TableDef) semanticObject); 
				return; 
			case XawPackage.TABLE_LITERAL:
				sequence_TableLiteral(context, (TableLiteral) semanticObject); 
				return; 
			case XawPackage.TABLE_ROW_LITERAL:
				sequence_TableRowLiteral(context, (TableRowLiteral) semanticObject); 
				return; 
			case XawPackage.XCASTED_COLUMN_EXPRESSION:
				sequence_XCastedColumnExpression(context, (XCastedColumnExpression) semanticObject); 
				return; 
			case XawPackage.XLOCAL_DATE_LITERAL:
				sequence_XLocalDateLiteral(context, (XLocalDateLiteral) semanticObject); 
				return; 
			case XawPackage.XLOCAL_TIME_LITERAL:
				sequence_XLocalTimeLiteral(context, (XLocalTimeLiteral) semanticObject); 
				return; 
			case XawPackage.XMETHOD:
				sequence_XMethod(context, (XMethod) semanticObject); 
				return; 
			case XawPackage.XURL_LITERAL:
				sequence_XURLLiteral(context, (XURLLiteral) semanticObject); 
				return; 
			case XawPackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XawPackage.XAW:
				sequence_Xaw(context, (Xaw) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				if (rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedColumnExpressionRule()
						|| action == grammarAccess.getXCastedColumnExpressionAccess().getXCastedColumnExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXSingleAndExpressionRule()
						|| action == grammarAccess.getXSingleAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()
						|| action == grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()
						|| rule == grammarAccess.getXAnnotationElementValueRule()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression_XSingleAndExpression(context, (XBinaryOperation) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXSingleOrExpressionRule()
						|| action == grammarAccess.getXSingleOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()) {
					sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression_XSingleAndExpression_XSingleOrExpression(context, (XBinaryOperation) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedColumnExpressionRule()
						|| action == grammarAccess.getXCastedColumnExpressionAccess().getXCastedColumnExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXSingleOrExpressionRule()
						|| action == grammarAccess.getXSingleOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXSingleAndExpressionRule()
						|| action == grammarAccess.getXSingleAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()
						|| action == grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()
						|| rule == grammarAccess.getXAnnotationElementValueRule()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedColumnExpressionRule()
						|| action == grammarAccess.getXCastedColumnExpressionAccess().getXCastedColumnExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXSingleOrExpressionRule()
						|| action == grammarAccess.getXSingleOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXSingleAndExpressionRule()
						|| action == grammarAccess.getXSingleAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()
						|| action == grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()
						|| rule == grammarAccess.getXAnnotationElementValueRule()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				if (rule == grammarAccess.getXAnnotationElementValueOrCommaListRule()) {
					sequence_XAnnotationElementValueOrCommaList_XListLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXAnnotationElementValueRule()) {
					sequence_XAnnotationElementValue_XListLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedColumnExpressionRule()
						|| action == grammarAccess.getXCastedColumnExpressionAccess().getXCastedColumnExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXSingleOrExpressionRule()
						|| action == grammarAccess.getXSingleOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXSingleAndExpressionRule()
						|| action == grammarAccess.getXSingleAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXLiteralRule()
						|| action == grammarAccess.getXAnnotationElementValueOrCommaListAccess().getXListLiteralElementsAction_1_1_0()
						|| rule == grammarAccess.getXAnnotationOrExpressionRule()
						|| rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXCollectionLiteralRule()
						|| rule == grammarAccess.getXListLiteralRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XListLiteral(context, (XListLiteral) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InlineTableRow returns InlineTableRow
	 *
	 * Constraint:
	 *     (expressions+=XExpression expressions+=XExpression*)?
	 */
	protected void sequence_InlineTableRow(ISerializationContext context, InlineTableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableColumnDef returns TableColumnDef
	 *
	 * Constraint:
	 *     (type=JvmTypeReference (name=ValidID | name=STRING))
	 */
	protected void sequence_TableColumnDef(ISerializationContext context, TableColumnDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableColumn returns TableColumn
	 *
	 * Constraint:
	 *     (columnDef=TableColumnDef expression=XExpression?)
	 */
	protected void sequence_TableColumn(ISerializationContext context, TableColumn semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableDef returns TableDef
	 *
	 * Constraint:
	 *     (name=ValidID (tableColumDefs+=TableColumnDef tableColumDefs+=TableColumnDef*)?)
	 */
	protected void sequence_TableDef(ISerializationContext context, TableDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableLiteral returns TableLiteral
	 *     XUnaryOperation returns TableLiteral
	 *     XCastedColumnExpression returns TableLiteral
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns TableLiteral
	 *     XAndExpression returns TableLiteral
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XSingleOrExpression returns TableLiteral
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XSingleAndExpression returns TableLiteral
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XLiteral returns TableLiteral
	 *     XAnnotationElementValueOrCommaList returns TableLiteral
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns TableLiteral
	 *     XAnnotationElementValue returns TableLiteral
	 *     XAnnotationOrExpression returns TableLiteral
	 *     XExpression returns TableLiteral
	 *     XAssignment returns TableLiteral
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns TableLiteral
	 *     XOrExpression returns TableLiteral
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XEqualityExpression returns TableLiteral
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XRelationalExpression returns TableLiteral
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns TableLiteral
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns TableLiteral
	 *     XOtherOperatorExpression returns TableLiteral
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XAdditiveExpression returns TableLiteral
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XMultiplicativeExpression returns TableLiteral
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns TableLiteral
	 *     XCastedExpression returns TableLiteral
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns TableLiteral
	 *     XPostfixOperation returns TableLiteral
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns TableLiteral
	 *     XMemberFeatureCall returns TableLiteral
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns TableLiteral
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns TableLiteral
	 *     XPrimaryExpression returns TableLiteral
	 *     XParenthesizedExpression returns TableLiteral
	 *     XExpressionOrVarDeclaration returns TableLiteral
	 *
	 * Constraint:
	 *     ((name=ValidID | name=STRING)? (expressions+=TableColumn expressions+=TableColumn*)? expressions+=InlineTableRow*)
	 */
	protected void sequence_TableLiteral(ISerializationContext context, TableLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TableRowLiteral returns TableRowLiteral
	 *     XUnaryOperation returns TableRowLiteral
	 *     XCastedColumnExpression returns TableRowLiteral
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns TableRowLiteral
	 *     XAndExpression returns TableRowLiteral
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XSingleOrExpression returns TableRowLiteral
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XSingleAndExpression returns TableRowLiteral
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XLiteral returns TableRowLiteral
	 *     XAnnotationElementValueOrCommaList returns TableRowLiteral
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns TableRowLiteral
	 *     XAnnotationElementValue returns TableRowLiteral
	 *     XAnnotationOrExpression returns TableRowLiteral
	 *     XExpression returns TableRowLiteral
	 *     XAssignment returns TableRowLiteral
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns TableRowLiteral
	 *     XOrExpression returns TableRowLiteral
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XEqualityExpression returns TableRowLiteral
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XRelationalExpression returns TableRowLiteral
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns TableRowLiteral
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns TableRowLiteral
	 *     XOtherOperatorExpression returns TableRowLiteral
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XAdditiveExpression returns TableRowLiteral
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XMultiplicativeExpression returns TableRowLiteral
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns TableRowLiteral
	 *     XCastedExpression returns TableRowLiteral
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns TableRowLiteral
	 *     XPostfixOperation returns TableRowLiteral
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns TableRowLiteral
	 *     XMemberFeatureCall returns TableRowLiteral
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns TableRowLiteral
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns TableRowLiteral
	 *     XPrimaryExpression returns TableRowLiteral
	 *     XParenthesizedExpression returns TableRowLiteral
	 *     XExpressionOrVarDeclaration returns TableRowLiteral
	 *
	 * Constraint:
	 *     (expressions+=XExpression expressions+=XExpression*)
	 */
	protected void sequence_TableRowLiteral(ISerializationContext context, TableRowLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XUnaryOperation returns XBinaryOperation
	 *     XCastedColumnExpression returns XBinaryOperation
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns XBinaryOperation
	 *     XAndExpression returns XBinaryOperation
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XSingleAndExpression returns XBinaryOperation
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XAnnotationElementValueOrCommaList returns XBinaryOperation
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns XBinaryOperation
	 *     XAnnotationElementValue returns XBinaryOperation
	 *     XAnnotationOrExpression returns XBinaryOperation
	 *     XExpression returns XBinaryOperation
	 *     XAssignment returns XBinaryOperation
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XBinaryOperation
	 *     XOrExpression returns XBinaryOperation
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XEqualityExpression returns XBinaryOperation
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XRelationalExpression returns XBinaryOperation
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XBinaryOperation
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XBinaryOperation
	 *     XOtherOperatorExpression returns XBinaryOperation
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XAdditiveExpression returns XBinaryOperation
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XMultiplicativeExpression returns XBinaryOperation
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *     XCastedExpression returns XBinaryOperation
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XBinaryOperation
	 *     XPostfixOperation returns XBinaryOperation
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XBinaryOperation
	 *     XMemberFeatureCall returns XBinaryOperation
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XBinaryOperation
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XBinaryOperation
	 *     XPrimaryExpression returns XBinaryOperation
	 *     XParenthesizedExpression returns XBinaryOperation
	 *     XExpressionOrVarDeclaration returns XBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=XAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=XSingleAndExpression) | 
	 *         (leftOperand=XSingleAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpSingleAnd] rightOperand=XEqualityExpression) | 
	 *         (leftOperand=XAssignment_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpMultiAssign] rightOperand=XAssignment) | 
	 *         (leftOperand=XOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=XAndExpression) | 
	 *         (leftOperand=XEqualityExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=XRelationalExpression) | 
	 *         (leftOperand=XRelationalExpression_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpCompare] rightOperand=XOtherOperatorExpression) | 
	 *         (leftOperand=XOtherOperatorExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOther] rightOperand=XAdditiveExpression) | 
	 *         (leftOperand=XAdditiveExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAdd] rightOperand=XMultiplicativeExpression) | 
	 *         (leftOperand=XMultiplicativeExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpMulti] rightOperand=XUnaryOperation)
	 *     )
	 */
	protected void sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression_XSingleAndExpression(ISerializationContext context, XBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XSingleOrExpression returns XBinaryOperation
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns XBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=XAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAnd] rightOperand=XSingleAndExpression) | 
	 *         (leftOperand=XSingleOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpSingleOr] rightOperand=XSingleAndExpression) | 
	 *         (leftOperand=XSingleAndExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpSingleAnd] rightOperand=XEqualityExpression) | 
	 *         (leftOperand=XAssignment_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpMultiAssign] rightOperand=XAssignment) | 
	 *         (leftOperand=XOrExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOr] rightOperand=XAndExpression) | 
	 *         (leftOperand=XEqualityExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpEquality] rightOperand=XRelationalExpression) | 
	 *         (leftOperand=XRelationalExpression_XBinaryOperation_1_1_0_0_0 feature=[JvmIdentifiableElement|OpCompare] rightOperand=XOtherOperatorExpression) | 
	 *         (leftOperand=XOtherOperatorExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpOther] rightOperand=XAdditiveExpression) | 
	 *         (leftOperand=XAdditiveExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpAdd] rightOperand=XMultiplicativeExpression) | 
	 *         (leftOperand=XMultiplicativeExpression_XBinaryOperation_1_0_0_0 feature=[JvmIdentifiableElement|OpMulti] rightOperand=XUnaryOperation)
	 *     )
	 */
	protected void sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression_XSingleAndExpression_XSingleOrExpression(ISerializationContext context, XBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XUnaryOperation returns XCastedColumnExpression
	 *     XCastedColumnExpression returns XCastedColumnExpression
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns XCastedColumnExpression
	 *     XAndExpression returns XCastedColumnExpression
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XSingleOrExpression returns XCastedColumnExpression
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XSingleAndExpression returns XCastedColumnExpression
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XAnnotationElementValueOrCommaList returns XCastedColumnExpression
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns XCastedColumnExpression
	 *     XAnnotationElementValue returns XCastedColumnExpression
	 *     XAnnotationOrExpression returns XCastedColumnExpression
	 *     XExpression returns XCastedColumnExpression
	 *     XAssignment returns XCastedColumnExpression
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XCastedColumnExpression
	 *     XOrExpression returns XCastedColumnExpression
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XEqualityExpression returns XCastedColumnExpression
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XRelationalExpression returns XCastedColumnExpression
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XCastedColumnExpression
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XCastedColumnExpression
	 *     XOtherOperatorExpression returns XCastedColumnExpression
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XAdditiveExpression returns XCastedColumnExpression
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XMultiplicativeExpression returns XCastedColumnExpression
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XCastedColumnExpression
	 *     XCastedExpression returns XCastedColumnExpression
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XCastedColumnExpression
	 *     XPostfixOperation returns XCastedColumnExpression
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XCastedColumnExpression
	 *     XMemberFeatureCall returns XCastedColumnExpression
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XCastedColumnExpression
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XCastedColumnExpression
	 *     XPrimaryExpression returns XCastedColumnExpression
	 *     XParenthesizedExpression returns XCastedColumnExpression
	 *     XExpressionOrVarDeclaration returns XCastedColumnExpression
	 *
	 * Constraint:
	 *     (target=XCastedColumnExpression_XCastedColumnExpression_1_0_0_0 type=JvmTypeReference)
	 */
	protected void sequence_XCastedColumnExpression(ISerializationContext context, XCastedColumnExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XawPackage.Literals.XCASTED_COLUMN_EXPRESSION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XawPackage.Literals.XCASTED_COLUMN_EXPRESSION__TARGET));
			if (transientValues.isValueTransient(semanticObject, XawPackage.Literals.XCASTED_COLUMN_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XawPackage.Literals.XCASTED_COLUMN_EXPRESSION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXCastedColumnExpressionAccess().getXCastedColumnExpressionTargetAction_1_0_0_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getXCastedColumnExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XLocalDateLiteral returns XLocalDateLiteral
	 *     XUnaryOperation returns XLocalDateLiteral
	 *     XCastedColumnExpression returns XLocalDateLiteral
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns XLocalDateLiteral
	 *     XAndExpression returns XLocalDateLiteral
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XSingleOrExpression returns XLocalDateLiteral
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XSingleAndExpression returns XLocalDateLiteral
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XLiteral returns XLocalDateLiteral
	 *     XAnnotationElementValueOrCommaList returns XLocalDateLiteral
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns XLocalDateLiteral
	 *     XAnnotationElementValue returns XLocalDateLiteral
	 *     XAnnotationOrExpression returns XLocalDateLiteral
	 *     XExpression returns XLocalDateLiteral
	 *     XAssignment returns XLocalDateLiteral
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XLocalDateLiteral
	 *     XOrExpression returns XLocalDateLiteral
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XEqualityExpression returns XLocalDateLiteral
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XRelationalExpression returns XLocalDateLiteral
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XLocalDateLiteral
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XLocalDateLiteral
	 *     XOtherOperatorExpression returns XLocalDateLiteral
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XAdditiveExpression returns XLocalDateLiteral
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XMultiplicativeExpression returns XLocalDateLiteral
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XLocalDateLiteral
	 *     XCastedExpression returns XLocalDateLiteral
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XLocalDateLiteral
	 *     XPostfixOperation returns XLocalDateLiteral
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XLocalDateLiteral
	 *     XMemberFeatureCall returns XLocalDateLiteral
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XLocalDateLiteral
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XLocalDateLiteral
	 *     XPrimaryExpression returns XLocalDateLiteral
	 *     XParenthesizedExpression returns XLocalDateLiteral
	 *     XExpressionOrVarDeclaration returns XLocalDateLiteral
	 *
	 * Constraint:
	 *     (day=INT month=MONTH year=INT)
	 */
	protected void sequence_XLocalDateLiteral(ISerializationContext context, XLocalDateLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XawPackage.Literals.XLOCAL_DATE_LITERAL__DAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XawPackage.Literals.XLOCAL_DATE_LITERAL__DAY));
			if (transientValues.isValueTransient(semanticObject, XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XawPackage.Literals.XLOCAL_DATE_LITERAL__MONTH));
			if (transientValues.isValueTransient(semanticObject, XawPackage.Literals.XLOCAL_DATE_LITERAL__YEAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XawPackage.Literals.XLOCAL_DATE_LITERAL__YEAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXLocalDateLiteralAccess().getDayINTTerminalRuleCall_2_0(), semanticObject.getDay());
		feeder.accept(grammarAccess.getXLocalDateLiteralAccess().getMonthMONTHParserRuleCall_4_0(), semanticObject.getMonth());
		feeder.accept(grammarAccess.getXLocalDateLiteralAccess().getYearINTTerminalRuleCall_6_0(), semanticObject.getYear());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XLocalTimeLiteral returns XLocalTimeLiteral
	 *     XUnaryOperation returns XLocalTimeLiteral
	 *     XCastedColumnExpression returns XLocalTimeLiteral
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns XLocalTimeLiteral
	 *     XAndExpression returns XLocalTimeLiteral
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XSingleOrExpression returns XLocalTimeLiteral
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XSingleAndExpression returns XLocalTimeLiteral
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XLiteral returns XLocalTimeLiteral
	 *     XAnnotationElementValueOrCommaList returns XLocalTimeLiteral
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns XLocalTimeLiteral
	 *     XAnnotationElementValue returns XLocalTimeLiteral
	 *     XAnnotationOrExpression returns XLocalTimeLiteral
	 *     XExpression returns XLocalTimeLiteral
	 *     XAssignment returns XLocalTimeLiteral
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XLocalTimeLiteral
	 *     XOrExpression returns XLocalTimeLiteral
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XEqualityExpression returns XLocalTimeLiteral
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XRelationalExpression returns XLocalTimeLiteral
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XLocalTimeLiteral
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XLocalTimeLiteral
	 *     XOtherOperatorExpression returns XLocalTimeLiteral
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XAdditiveExpression returns XLocalTimeLiteral
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XMultiplicativeExpression returns XLocalTimeLiteral
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XLocalTimeLiteral
	 *     XCastedExpression returns XLocalTimeLiteral
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XLocalTimeLiteral
	 *     XPostfixOperation returns XLocalTimeLiteral
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XLocalTimeLiteral
	 *     XMemberFeatureCall returns XLocalTimeLiteral
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XLocalTimeLiteral
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XLocalTimeLiteral
	 *     XPrimaryExpression returns XLocalTimeLiteral
	 *     XParenthesizedExpression returns XLocalTimeLiteral
	 *     XExpressionOrVarDeclaration returns XLocalTimeLiteral
	 *
	 * Constraint:
	 *     (hour=INT min=INT second=INT?)
	 */
	protected void sequence_XLocalTimeLiteral(ISerializationContext context, XLocalTimeLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMethod returns XMethod
	 *
	 * Constraint:
	 *     (
	 *         (typeParameters+=JvmTypeParameter typeParameters+=JvmTypeParameter*)? 
	 *         returnType=JvmTypeReference? 
	 *         name=ID 
	 *         (parameters+=FullJvmFormalParameter parameters+=FullJvmFormalParameter*)? 
	 *         body=XExpression
	 *     )
	 */
	protected void sequence_XMethod(ISerializationContext context, XMethod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XURLLiteral returns XURLLiteral
	 *     XUnaryOperation returns XURLLiteral
	 *     XCastedColumnExpression returns XURLLiteral
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns XURLLiteral
	 *     XAndExpression returns XURLLiteral
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XSingleOrExpression returns XURLLiteral
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XSingleAndExpression returns XURLLiteral
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XLiteral returns XURLLiteral
	 *     XAnnotationElementValueOrCommaList returns XURLLiteral
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns XURLLiteral
	 *     XAnnotationElementValue returns XURLLiteral
	 *     XAnnotationOrExpression returns XURLLiteral
	 *     XExpression returns XURLLiteral
	 *     XAssignment returns XURLLiteral
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XURLLiteral
	 *     XOrExpression returns XURLLiteral
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XEqualityExpression returns XURLLiteral
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XRelationalExpression returns XURLLiteral
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XURLLiteral
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XURLLiteral
	 *     XOtherOperatorExpression returns XURLLiteral
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XAdditiveExpression returns XURLLiteral
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XMultiplicativeExpression returns XURLLiteral
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XURLLiteral
	 *     XCastedExpression returns XURLLiteral
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XURLLiteral
	 *     XPostfixOperation returns XURLLiteral
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XURLLiteral
	 *     XMemberFeatureCall returns XURLLiteral
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XURLLiteral
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XURLLiteral
	 *     XPrimaryExpression returns XURLLiteral
	 *     XParenthesizedExpression returns XURLLiteral
	 *     XExpressionOrVarDeclaration returns XURLLiteral
	 *
	 * Constraint:
	 *     (
	 *         url=STRING | 
	 *         (
	 *             scheme=ID? 
	 *             host=HOST? 
	 *             port=INT? 
	 *             path=PATH 
	 *             (params+=PARAM params+=PARAM*)? 
	 *             frag=FRAGMENT?
	 *         )
	 *     )
	 */
	protected void sequence_XURLLiteral(ISerializationContext context, XURLLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XUnaryOperation returns XUnaryOperation
	 *     XCastedColumnExpression returns XUnaryOperation
	 *     XCastedColumnExpression.XCastedColumnExpression_1_0_0_0 returns XUnaryOperation
	 *     XAndExpression returns XUnaryOperation
	 *     XAndExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XSingleOrExpression returns XUnaryOperation
	 *     XSingleOrExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XSingleAndExpression returns XUnaryOperation
	 *     XSingleAndExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XAnnotationElementValueOrCommaList returns XUnaryOperation
	 *     XAnnotationElementValueOrCommaList.XListLiteral_1_1_0 returns XUnaryOperation
	 *     XAnnotationElementValue returns XUnaryOperation
	 *     XAnnotationOrExpression returns XUnaryOperation
	 *     XExpression returns XUnaryOperation
	 *     XAssignment returns XUnaryOperation
	 *     XAssignment.XBinaryOperation_1_1_0_0_0 returns XUnaryOperation
	 *     XOrExpression returns XUnaryOperation
	 *     XOrExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XEqualityExpression returns XUnaryOperation
	 *     XEqualityExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XRelationalExpression returns XUnaryOperation
	 *     XRelationalExpression.XInstanceOfExpression_1_0_0_0_0 returns XUnaryOperation
	 *     XRelationalExpression.XBinaryOperation_1_1_0_0_0 returns XUnaryOperation
	 *     XOtherOperatorExpression returns XUnaryOperation
	 *     XOtherOperatorExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XAdditiveExpression returns XUnaryOperation
	 *     XAdditiveExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XMultiplicativeExpression returns XUnaryOperation
	 *     XMultiplicativeExpression.XBinaryOperation_1_0_0_0 returns XUnaryOperation
	 *     XCastedExpression returns XUnaryOperation
	 *     XCastedExpression.XCastedExpression_1_0_0_0 returns XUnaryOperation
	 *     XPostfixOperation returns XUnaryOperation
	 *     XPostfixOperation.XPostfixOperation_1_0_0 returns XUnaryOperation
	 *     XMemberFeatureCall returns XUnaryOperation
	 *     XMemberFeatureCall.XAssignment_1_0_0_0_0 returns XUnaryOperation
	 *     XMemberFeatureCall.XMemberFeatureCall_1_1_0_0_0 returns XUnaryOperation
	 *     XPrimaryExpression returns XUnaryOperation
	 *     XParenthesizedExpression returns XUnaryOperation
	 *     XExpressionOrVarDeclaration returns XUnaryOperation
	 *
	 * Constraint:
	 *     (feature=[JvmIdentifiableElement|OpUnary] operand=XUnaryOperation)
	 */
	protected void sequence_XUnaryOperation(ISerializationContext context, XUnaryOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XawPackage.Literals.XUNARY_OPERATION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XawPackage.Literals.XUNARY_OPERATION__FEATURE));
			if (transientValues.isValueTransient(semanticObject, XawPackage.Literals.XUNARY_OPERATION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XawPackage.Literals.XUNARY_OPERATION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1(), semanticObject.eGet(XawPackage.Literals.XUNARY_OPERATION__FEATURE, false));
		feeder.accept(grammarAccess.getXUnaryOperationAccess().getOperandXUnaryOperationParserRuleCall_0_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Xaw returns Xaw
	 *
	 * Constraint:
	 *     (
	 *         importSection=XImportSection? 
	 *         qName=QualifiedName 
	 *         (tableDefs+=TableDef | expressions+=XExpression | expressions+=XVariableDeclaration | methods+=XMethod)*
	 *     )
	 */
	protected void sequence_Xaw(ISerializationContext context, Xaw semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
