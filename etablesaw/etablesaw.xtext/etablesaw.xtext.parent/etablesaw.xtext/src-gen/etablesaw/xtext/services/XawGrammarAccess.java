/*
 * generated by Xtext 2.14.0
 */
package etablesaw.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XawGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XawElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.Xaw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXawAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_1_0 = (RuleCall)cImportSectionAssignment_1.eContents().get(0);
		private final Keyword cXawKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cQNameAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final Alternatives cExpressionsAlternatives_4_0_0 = (Alternatives)cExpressionsAssignment_4_0.eContents().get(0);
		private final RuleCall cExpressionsXExpressionParserRuleCall_4_0_0_0 = (RuleCall)cExpressionsAlternatives_4_0_0.eContents().get(0);
		private final RuleCall cExpressionsXVariableDeclarationParserRuleCall_4_0_0_1 = (RuleCall)cExpressionsAlternatives_4_0_0.eContents().get(1);
		private final Assignment cMethodsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cMethodsXMethodParserRuleCall_4_1_0 = (RuleCall)cMethodsAssignment_4_1.eContents().get(0);
		
		//Xaw xbase::XBlockExpression:
		//	{Xaw} importSection=XImportSection?
		//	'xaw' qName=QualifiedName (expressions+=(XExpression | XVariableDeclaration) | methods+=XMethod)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Xaw} importSection=XImportSection? 'xaw' qName=QualifiedName (expressions+=(XExpression | XVariableDeclaration) |
		//methods+=XMethod)*
		public Group getGroup() { return cGroup; }
		
		//{Xaw}
		public Action getXawAction_0() { return cXawAction_0; }
		
		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_1() { return cImportSectionAssignment_1; }
		
		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_1_0() { return cImportSectionXImportSectionParserRuleCall_1_0; }
		
		//'xaw'
		public Keyword getXawKeyword_2() { return cXawKeyword_2; }
		
		//qName=QualifiedName
		public Assignment getQNameAssignment_3() { return cQNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getQNameQualifiedNameParserRuleCall_3_0() { return cQNameQualifiedNameParserRuleCall_3_0; }
		
		//(expressions+=(XExpression | XVariableDeclaration) | methods+=XMethod)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//expressions+=(XExpression | XVariableDeclaration)
		public Assignment getExpressionsAssignment_4_0() { return cExpressionsAssignment_4_0; }
		
		//(XExpression | XVariableDeclaration)
		public Alternatives getExpressionsAlternatives_4_0_0() { return cExpressionsAlternatives_4_0_0; }
		
		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_4_0_0_0() { return cExpressionsXExpressionParserRuleCall_4_0_0_0; }
		
		//XVariableDeclaration
		public RuleCall getExpressionsXVariableDeclarationParserRuleCall_4_0_0_1() { return cExpressionsXVariableDeclarationParserRuleCall_4_0_0_1; }
		
		//methods+=XMethod
		public Assignment getMethodsAssignment_4_1() { return cMethodsAssignment_4_1; }
		
		//XMethod
		public RuleCall getMethodsXMethodParserRuleCall_4_1_0() { return cMethodsXMethodParserRuleCall_4_1_0; }
	}
	public class XMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.XMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//XMethod:
		//	'def' returnType=JvmTypeReference? name=ID
		//	'(' (parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
		//	body=XExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'def' returnType=JvmTypeReference? name=ID '(' (parameters+=FullJvmFormalParameter (','
		//parameters+=FullJvmFormalParameter)*)? ')' body=XExpression
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//returnType=JvmTypeReference?
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }
		
		//JvmTypeReference
		public RuleCall getReturnTypeJvmTypeReferenceParserRuleCall_1_0() { return cReturnTypeJvmTypeReferenceParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_4_0_0() { return cParametersFullJvmFormalParameterParserRuleCall_4_0_0; }
		
		//(',' parameters+=FullJvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//body=XExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }
		
		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_6_0() { return cBodyXExpressionParserRuleCall_6_0; }
	}
	public class TableLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.TableLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Alternatives cNameAlternatives_2_0_0 = (Alternatives)cNameAssignment_2_0.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0_0 = (RuleCall)cNameAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0_0_1 = (RuleCall)cNameAlternatives_2_0_0.eContents().get(1);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExpressionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionsTableColumnParserRuleCall_3_0_0 = (RuleCall)cExpressionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cExpressionsTableColumnParserRuleCall_3_1_1_0 = (RuleCall)cExpressionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionsInlineTableRowParserRuleCall_5_0 = (RuleCall)cExpressionsAssignment_5.eContents().get(0);
		
		//// Table syntax
		//TableLiteral xbase::XBlockExpression:
		//	{TableLiteral}
		//	'#' (name=(ValidID | STRING) ':')? (expressions+=TableColumn (',' expressions+=TableColumn)*)?
		//	'#'
		//	expressions+=InlineTableRow*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TableLiteral} '#' (name=(ValidID | STRING) ':')? (expressions+=TableColumn (',' expressions+=TableColumn)*)? '#'
		//expressions+=InlineTableRow*
		public Group getGroup() { return cGroup; }
		
		//{TableLiteral}
		public Action getTableLiteralAction_0() { return cTableLiteralAction_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//(name=(ValidID | STRING) ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//name=(ValidID | STRING)
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//(ValidID | STRING)
		public Alternatives getNameAlternatives_2_0_0() { return cNameAlternatives_2_0_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0_0() { return cNameValidIDParserRuleCall_2_0_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0_0_1() { return cNameSTRINGTerminalRuleCall_2_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//(expressions+=TableColumn (',' expressions+=TableColumn)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//expressions+=TableColumn
		public Assignment getExpressionsAssignment_3_0() { return cExpressionsAssignment_3_0; }
		
		//TableColumn
		public RuleCall getExpressionsTableColumnParserRuleCall_3_0_0() { return cExpressionsTableColumnParserRuleCall_3_0_0; }
		
		//(',' expressions+=TableColumn)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//expressions+=TableColumn
		public Assignment getExpressionsAssignment_3_1_1() { return cExpressionsAssignment_3_1_1; }
		
		//TableColumn
		public RuleCall getExpressionsTableColumnParserRuleCall_3_1_1_0() { return cExpressionsTableColumnParserRuleCall_3_1_1_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_4() { return cNumberSignKeyword_4; }
		
		//expressions+=InlineTableRow*
		public Assignment getExpressionsAssignment_5() { return cExpressionsAssignment_5; }
		
		//InlineTableRow
		public RuleCall getExpressionsInlineTableRowParserRuleCall_5_0() { return cExpressionsInlineTableRowParserRuleCall_5_0; }
	}
	public class TableColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.TableColumn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNameAlternatives_1_1_0 = (Alternatives)cNameAssignment_1_1.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0_0 = (RuleCall)cNameAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cNameAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExpressionAssignment_1_2_1.eContents().get(0);
		
		//// Column syntax
		//TableColumn xbase::XExpression:
		//	{TableColumn} (type=JvmTypeReference name=(ValidID | STRING) ('=' expression=XExpression)?);
		@Override public ParserRule getRule() { return rule; }
		
		//{TableColumn} (type=JvmTypeReference name=(ValidID | STRING) ('=' expression=XExpression)?)
		public Group getGroup() { return cGroup; }
		
		//{TableColumn}
		public Action getTableColumnAction_0() { return cTableColumnAction_0; }
		
		//type=JvmTypeReference name=(ValidID | STRING) ('=' expression=XExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0_0; }
		
		//name=(ValidID | STRING)
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//(ValidID | STRING)
		public Alternatives getNameAlternatives_1_1_0() { return cNameAlternatives_1_1_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0_0() { return cNameValidIDParserRuleCall_1_1_0_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_1_0_1() { return cNameSTRINGTerminalRuleCall_1_1_0_1; }
		
		//('=' expression=XExpression)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_2_0() { return cEqualsSignKeyword_1_2_0; }
		
		//expression=XExpression
		public Assignment getExpressionAssignment_1_2_1() { return cExpressionAssignment_1_2_1; }
		
		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_1_2_1_0() { return cExpressionXExpressionParserRuleCall_1_2_1_0; }
	}
	public class InlineTableRowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.InlineTableRow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInlineTableRowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cExpressionsXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cExpressionsAssignment_2_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Row syntax
		//InlineTableRow xbase::XBlockExpression:
		//	{InlineTableRow} '|' (expressions+=XExpression (',' expressions+=XExpression)*)? '|';
		@Override public ParserRule getRule() { return rule; }
		
		//{InlineTableRow} '|' (expressions+=XExpression (',' expressions+=XExpression)*)? '|'
		public Group getGroup() { return cGroup; }
		
		//{InlineTableRow}
		public Action getInlineTableRowAction_0() { return cInlineTableRowAction_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }
		
		//(expressions+=XExpression (',' expressions+=XExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//expressions+=XExpression
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }
		
		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_2_0_0() { return cExpressionsXExpressionParserRuleCall_2_0_0; }
		
		//(',' expressions+=XExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//expressions+=XExpression
		public Assignment getExpressionsAssignment_2_1_1() { return cExpressionsAssignment_2_1_1; }
		
		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_2_1_1_0() { return cExpressionsXExpressionParserRuleCall_2_1_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_3() { return cVerticalLineKeyword_3; }
	}
	public class TableRowLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.TableRowLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTableRowLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionsXExpressionParserRuleCall_3_0 = (RuleCall)cExpressionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExpressionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExpressionsXExpressionParserRuleCall_4_1_0 = (RuleCall)cExpressionsAssignment_4_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cNumberSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TableRowLiteral xbase::XExpression:
		//	{TableRowLiteral} '#' '|' expressions+=XExpression (',' expressions+=XExpression)* '|' '#';
		@Override public ParserRule getRule() { return rule; }
		
		//{TableRowLiteral} '#' '|' expressions+=XExpression (',' expressions+=XExpression)* '|' '#'
		public Group getGroup() { return cGroup; }
		
		//{TableRowLiteral}
		public Action getTableRowLiteralAction_0() { return cTableRowLiteralAction_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//expressions+=XExpression
		public Assignment getExpressionsAssignment_3() { return cExpressionsAssignment_3; }
		
		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_3_0() { return cExpressionsXExpressionParserRuleCall_3_0; }
		
		//(',' expressions+=XExpression)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//expressions+=XExpression
		public Assignment getExpressionsAssignment_4_1() { return cExpressionsAssignment_4_1; }
		
		//XExpression
		public RuleCall getExpressionsXExpressionParserRuleCall_4_1_0() { return cExpressionsXExpressionParserRuleCall_4_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_5() { return cVerticalLineKeyword_5; }
		
		//'#'
		public Keyword getNumberSignKeyword_6() { return cNumberSignKeyword_6; }
	}
	public class XLocalTimeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.XLocalTimeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXLocalTimeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cHourAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHourINTTerminalRuleCall_2_0 = (RuleCall)cHourAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinINTTerminalRuleCall_4_0 = (RuleCall)cMinAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSecondAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSecondINTTerminalRuleCall_5_1_0 = (RuleCall)cSecondAssignment_5_1.eContents().get(0);
		
		//XLocalTimeLiteral xbase::XExpression:
		//	{XLocalTimeLiteral} '@' hour=INT ':' min=INT (':' second=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{XLocalTimeLiteral} '@' hour=INT ':' min=INT (':' second=INT)?
		public Group getGroup() { return cGroup; }
		
		//{XLocalTimeLiteral}
		public Action getXLocalTimeLiteralAction_0() { return cXLocalTimeLiteralAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//hour=INT
		public Assignment getHourAssignment_2() { return cHourAssignment_2; }
		
		//INT
		public RuleCall getHourINTTerminalRuleCall_2_0() { return cHourINTTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//min=INT
		public Assignment getMinAssignment_4() { return cMinAssignment_4; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_4_0() { return cMinINTTerminalRuleCall_4_0; }
		
		//(':' second=INT)?
		public Group getGroup_5() { return cGroup_5; }
		
		//':'
		public Keyword getColonKeyword_5_0() { return cColonKeyword_5_0; }
		
		//second=INT
		public Assignment getSecondAssignment_5_1() { return cSecondAssignment_5_1; }
		
		//INT
		public RuleCall getSecondINTTerminalRuleCall_5_1_0() { return cSecondINTTerminalRuleCall_5_1_0; }
	}
	public class MONTHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.MONTH");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MONTH:
		//	INT | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class XLocalDateLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.XLocalDateLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXLocalDateLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDayAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDayINTTerminalRuleCall_2_0 = (RuleCall)cDayAssignment_2.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMonthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMonthMONTHParserRuleCall_4_0 = (RuleCall)cMonthAssignment_4.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYearAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYearINTTerminalRuleCall_6_0 = (RuleCall)cYearAssignment_6.eContents().get(0);
		
		//// ("January" | "February" | "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December");
		//XLocalDateLiteral xbase::XExpression:
		//	{XLocalDateLiteral} '@' day=INT '-' month=MONTH '-' year=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{XLocalDateLiteral} '@' day=INT '-' month=MONTH '-' year=INT
		public Group getGroup() { return cGroup; }
		
		//{XLocalDateLiteral}
		public Action getXLocalDateLiteralAction_0() { return cXLocalDateLiteralAction_0; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }
		
		//day=INT
		public Assignment getDayAssignment_2() { return cDayAssignment_2; }
		
		//INT
		public RuleCall getDayINTTerminalRuleCall_2_0() { return cDayINTTerminalRuleCall_2_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3() { return cHyphenMinusKeyword_3; }
		
		//month=MONTH
		public Assignment getMonthAssignment_4() { return cMonthAssignment_4; }
		
		//MONTH
		public RuleCall getMonthMONTHParserRuleCall_4_0() { return cMonthMONTHParserRuleCall_4_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }
		
		//year=INT
		public Assignment getYearAssignment_6() { return cYearAssignment_6; }
		
		//INT
		public RuleCall getYearINTTerminalRuleCall_6_0() { return cYearINTTerminalRuleCall_6_0; }
	}
	public class HOSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.HOST");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//HOST:
		//	(ID | INT) ('.' (ID | INT))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | INT) ('.' (ID | INT))*
		public Group getGroup() { return cGroup; }
		
		//ID | INT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//('.' (ID | INT))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID | INT
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
	}
	public class SEGMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.SEGMENT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		//SEGMENT:
		//	(ID | INT) ('.' (ID | INT))*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | INT) ('.' (ID | INT))*
		public Group getGroup() { return cGroup; }
		
		//ID | INT
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//('.' (ID | INT))*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID | INT
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_0() { return cIDTerminalRuleCall_1_1_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1() { return cINTTerminalRuleCall_1_1_1; }
	}
	public class PATHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.PATH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSolidusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSEGMENTParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSolidusKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cSEGMENTParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		
		//PATH:
		//	'/' (SEGMENT ('/' SEGMENT)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'/' (SEGMENT ('/' SEGMENT)*)?
		public Group getGroup() { return cGroup; }
		
		//'/'
		public Keyword getSolidusKeyword_0() { return cSolidusKeyword_0; }
		
		//(SEGMENT ('/' SEGMENT)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//SEGMENT
		public RuleCall getSEGMENTParserRuleCall_1_0() { return cSEGMENTParserRuleCall_1_0; }
		
		//('/' SEGMENT)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_0() { return cSolidusKeyword_1_1_0; }
		
		//SEGMENT
		public RuleCall getSEGMENTParserRuleCall_1_1_1() { return cSEGMENTParserRuleCall_1_1_1; }
	}
	public class FRAGMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.FRAGMENT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FRAGMENT:
		//	ID | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class PARAMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.PARAM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//PARAM:
		//	ID '=' (ID | INT);
		@Override public ParserRule getRule() { return rule; }
		
		//ID '=' (ID | INT)
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//ID | INT
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_1() { return cINTTerminalRuleCall_2_1; }
	}
	public class XURLLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.XURLLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXURLLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cUrlAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cUrlSTRINGTerminalRuleCall_1_1_0_0 = (RuleCall)cUrlAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cGroup_1_1_1.eContents().get(0);
		private final Assignment cSchemeAssignment_1_1_1_0_0 = (Assignment)cGroup_1_1_1_0.eContents().get(0);
		private final RuleCall cSchemeIDTerminalRuleCall_1_1_1_0_0_0 = (RuleCall)cSchemeAssignment_1_1_1_0_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1_0_1 = (Keyword)cGroup_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cSolidusSolidusKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cHostAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cHostHOSTParserRuleCall_1_1_1_1_1_0 = (RuleCall)cHostAssignment_1_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_1_2 = (Group)cGroup_1_1_1_1.eContents().get(2);
		private final Keyword cColonKeyword_1_1_1_1_2_0 = (Keyword)cGroup_1_1_1_1_2.eContents().get(0);
		private final Assignment cPortAssignment_1_1_1_1_2_1 = (Assignment)cGroup_1_1_1_1_2.eContents().get(1);
		private final RuleCall cPortINTTerminalRuleCall_1_1_1_1_2_1_0 = (RuleCall)cPortAssignment_1_1_1_1_2_1.eContents().get(0);
		private final Assignment cPathAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cPathPATHParserRuleCall_1_1_1_2_0 = (RuleCall)cPathAssignment_1_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_1_3 = (Group)cGroup_1_1_1.eContents().get(3);
		private final Keyword cQuestionMarkKeyword_1_1_1_3_0 = (Keyword)cGroup_1_1_1_3.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_3_1 = (Assignment)cGroup_1_1_1_3.eContents().get(1);
		private final RuleCall cParamsPARAMParserRuleCall_1_1_1_3_1_0 = (RuleCall)cParamsAssignment_1_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_1_3_2 = (Group)cGroup_1_1_1_3.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_1_1_3_2_0 = (Keyword)cGroup_1_1_1_3_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_3_2_1 = (Assignment)cGroup_1_1_1_3_2.eContents().get(1);
		private final RuleCall cParamsPARAMParserRuleCall_1_1_1_3_2_1_0 = (RuleCall)cParamsAssignment_1_1_1_3_2_1.eContents().get(0);
		private final Group cGroup_1_1_1_4 = (Group)cGroup_1_1_1.eContents().get(4);
		private final Keyword cNumberSignKeyword_1_1_1_4_0 = (Keyword)cGroup_1_1_1_4.eContents().get(0);
		private final Assignment cFragAssignment_1_1_1_4_1 = (Assignment)cGroup_1_1_1_4.eContents().get(1);
		private final RuleCall cFragFRAGMENTParserRuleCall_1_1_1_4_1_0 = (RuleCall)cFragAssignment_1_1_1_4_1.eContents().get(0);
		
		//XURLLiteral xbase::XExpression hidden():
		//	{XURLLiteral} ('@' (url=STRING | (scheme=ID ':')? ('//' host=HOST? (':' port=INT)?)? path=PATH ('?' params+=PARAM ('&'
		//	params+=PARAM)*)? ('#' frag=FRAGMENT)?));
		@Override public ParserRule getRule() { return rule; }
		
		//{XURLLiteral} ('@' (url=STRING | (scheme=ID ':')? ('//' host=HOST? (':' port=INT)?)? path=PATH ('?' params+=PARAM ('&'
		//params+=PARAM)*)? ('#' frag=FRAGMENT)?))
		public Group getGroup() { return cGroup; }
		
		//{XURLLiteral}
		public Action getXURLLiteralAction_0() { return cXURLLiteralAction_0; }
		
		//'@' (url=STRING | (scheme=ID ':')? ('//' host=HOST? (':' port=INT)?)? path=PATH ('?' params+=PARAM ('&'
		//params+=PARAM)*)? ('#' frag=FRAGMENT)?)
		public Group getGroup_1() { return cGroup_1; }
		
		//'@'
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }
		
		//url=STRING | (scheme=ID ':')? ('//' host=HOST? (':' port=INT)?)? path=PATH ('?' params+=PARAM ('&' params+=PARAM)*)?
		//('#' frag=FRAGMENT)?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//url=STRING
		public Assignment getUrlAssignment_1_1_0() { return cUrlAssignment_1_1_0; }
		
		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_1_1_0_0() { return cUrlSTRINGTerminalRuleCall_1_1_0_0; }
		
		//(scheme=ID ':')? ('//' host=HOST? (':' port=INT)?)? path=PATH ('?' params+=PARAM ('&' params+=PARAM)*)? ('#'
		//frag=FRAGMENT)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//(scheme=ID ':')?
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//scheme=ID
		public Assignment getSchemeAssignment_1_1_1_0_0() { return cSchemeAssignment_1_1_1_0_0; }
		
		//ID
		public RuleCall getSchemeIDTerminalRuleCall_1_1_1_0_0_0() { return cSchemeIDTerminalRuleCall_1_1_1_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1_0_1() { return cColonKeyword_1_1_1_0_1; }
		
		//('//' host=HOST? (':' port=INT)?)?
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//'//'
		public Keyword getSolidusSolidusKeyword_1_1_1_1_0() { return cSolidusSolidusKeyword_1_1_1_1_0; }
		
		//host=HOST?
		public Assignment getHostAssignment_1_1_1_1_1() { return cHostAssignment_1_1_1_1_1; }
		
		//HOST
		public RuleCall getHostHOSTParserRuleCall_1_1_1_1_1_0() { return cHostHOSTParserRuleCall_1_1_1_1_1_0; }
		
		//(':' port=INT)?
		public Group getGroup_1_1_1_1_2() { return cGroup_1_1_1_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_1_1_1_2_0() { return cColonKeyword_1_1_1_1_2_0; }
		
		//port=INT
		public Assignment getPortAssignment_1_1_1_1_2_1() { return cPortAssignment_1_1_1_1_2_1; }
		
		//INT
		public RuleCall getPortINTTerminalRuleCall_1_1_1_1_2_1_0() { return cPortINTTerminalRuleCall_1_1_1_1_2_1_0; }
		
		//path=PATH
		public Assignment getPathAssignment_1_1_1_2() { return cPathAssignment_1_1_1_2; }
		
		//PATH
		public RuleCall getPathPATHParserRuleCall_1_1_1_2_0() { return cPathPATHParserRuleCall_1_1_1_2_0; }
		
		//('?' params+=PARAM ('&' params+=PARAM)*)?
		public Group getGroup_1_1_1_3() { return cGroup_1_1_1_3; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_1_1_3_0() { return cQuestionMarkKeyword_1_1_1_3_0; }
		
		//params+=PARAM
		public Assignment getParamsAssignment_1_1_1_3_1() { return cParamsAssignment_1_1_1_3_1; }
		
		//PARAM
		public RuleCall getParamsPARAMParserRuleCall_1_1_1_3_1_0() { return cParamsPARAMParserRuleCall_1_1_1_3_1_0; }
		
		//('&' params+=PARAM)*
		public Group getGroup_1_1_1_3_2() { return cGroup_1_1_1_3_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1_1_3_2_0() { return cAmpersandKeyword_1_1_1_3_2_0; }
		
		//params+=PARAM
		public Assignment getParamsAssignment_1_1_1_3_2_1() { return cParamsAssignment_1_1_1_3_2_1; }
		
		//PARAM
		public RuleCall getParamsPARAMParserRuleCall_1_1_1_3_2_1_0() { return cParamsPARAMParserRuleCall_1_1_1_3_2_1_0; }
		
		//('#' frag=FRAGMENT)?
		public Group getGroup_1_1_1_4() { return cGroup_1_1_1_4; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_1_1_4_0() { return cNumberSignKeyword_1_1_1_4_0; }
		
		//frag=FRAGMENT
		public Assignment getFragAssignment_1_1_1_4_1() { return cFragAssignment_1_1_1_4_1; }
		
		//FRAGMENT
		public RuleCall getFragFRAGMENTParserRuleCall_1_1_1_4_1_0() { return cFragFRAGMENTParserRuleCall_1_1_1_4_1_0; }
	}
	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXCastedColumnExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//XUnaryOperation xbase::XExpression:
		//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
		//	| XCastedColumnExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedColumnExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//{XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }
		
		//feature=[types::JvmIdentifiableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }
		
		//[types::JvmIdentifiableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }
		
		//OpUnary
		public RuleCall getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1; }
		
		//operand=XUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//XUnaryOperation
		public RuleCall getOperandXUnaryOperationParserRuleCall_0_2_0() { return cOperandXUnaryOperationParserRuleCall_0_2_0; }
		
		//XCastedColumnExpression
		public RuleCall getXCastedColumnExpressionParserRuleCall_1() { return cXCastedColumnExpressionParserRuleCall_1; }
	}
	public class XCastedColumnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.XCastedColumnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXCastedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXCastedColumnExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cOfKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//XCastedColumnExpression xbase::XExpression:
		//	XCastedExpression (=> ({XCastedColumnExpression.target=current} 'of') type=JvmTypeReference)*;
		@Override public ParserRule getRule() { return rule; }
		
		//XCastedExpression (=> ({XCastedColumnExpression.target=current} 'of') type=JvmTypeReference)*
		public Group getGroup() { return cGroup; }
		
		//XCastedExpression
		public RuleCall getXCastedExpressionParserRuleCall_0() { return cXCastedExpressionParserRuleCall_0; }
		
		//(=> ({XCastedColumnExpression.target=current} 'of') type=JvmTypeReference)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({XCastedColumnExpression.target=current} 'of')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{XCastedColumnExpression.target=current} 'of'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{XCastedColumnExpression.target=current}
		public Action getXCastedColumnExpressionTargetAction_1_0_0_0() { return cXCastedColumnExpressionTargetAction_1_0_0_0; }
		
		//'of'
		public Keyword getOfKeyword_1_0_0_1() { return cOfKeyword_1_0_0_1; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_0; }
	}
	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cQuestionMarkKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//@Override
		//OpMulti:
		//	'*' | '**' | '/' | '%'
		//	| '?' // eval operator
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '**' | '/' | '%' | '?'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'**'
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }
		
		//'/'
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_4() { return cQuestionMarkKeyword_4; }
	}
	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "etablesaw.xtext.Xaw.XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTableLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTableRowLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXLocalTimeLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXLocalDateLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXURLLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXCollectionLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXClosureParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXBooleanLiteralParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXNumberLiteralParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXNullLiteralParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXStringLiteralParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXTypeLiteralParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//@Override
		//XLiteral xbase::XExpression:
		//	TableLiteral
		//	| TableRowLiteral
		//	| XLocalTimeLiteral | XLocalDateLiteral
		//	| XURLLiteral
		//	| XCollectionLiteral
		//	| XClosure
		//	| XBooleanLiteral
		//	| XNumberLiteral
		//	| XNullLiteral
		//	| XStringLiteral
		//	| XTypeLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//TableLiteral | TableRowLiteral | XLocalTimeLiteral | XLocalDateLiteral | XURLLiteral | XCollectionLiteral | XClosure |
		//XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TableLiteral
		public RuleCall getTableLiteralParserRuleCall_0() { return cTableLiteralParserRuleCall_0; }
		
		//TableRowLiteral
		public RuleCall getTableRowLiteralParserRuleCall_1() { return cTableRowLiteralParserRuleCall_1; }
		
		//XLocalTimeLiteral
		public RuleCall getXLocalTimeLiteralParserRuleCall_2() { return cXLocalTimeLiteralParserRuleCall_2; }
		
		//XLocalDateLiteral
		public RuleCall getXLocalDateLiteralParserRuleCall_3() { return cXLocalDateLiteralParserRuleCall_3; }
		
		//XURLLiteral
		public RuleCall getXURLLiteralParserRuleCall_4() { return cXURLLiteralParserRuleCall_4; }
		
		//XCollectionLiteral
		public RuleCall getXCollectionLiteralParserRuleCall_5() { return cXCollectionLiteralParserRuleCall_5; }
		
		//XClosure
		public RuleCall getXClosureParserRuleCall_6() { return cXClosureParserRuleCall_6; }
		
		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_7() { return cXBooleanLiteralParserRuleCall_7; }
		
		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_8() { return cXNumberLiteralParserRuleCall_8; }
		
		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_9() { return cXNullLiteralParserRuleCall_9; }
		
		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_10() { return cXStringLiteralParserRuleCall_10; }
		
		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_11() { return cXTypeLiteralParserRuleCall_11; }
	}
	
	
	private final XawElements pXaw;
	private final XMethodElements pXMethod;
	private final TableLiteralElements pTableLiteral;
	private final TableColumnElements pTableColumn;
	private final InlineTableRowElements pInlineTableRow;
	private final TableRowLiteralElements pTableRowLiteral;
	private final XLocalTimeLiteralElements pXLocalTimeLiteral;
	private final MONTHElements pMONTH;
	private final XLocalDateLiteralElements pXLocalDateLiteral;
	private final HOSTElements pHOST;
	private final SEGMENTElements pSEGMENT;
	private final PATHElements pPATH;
	private final FRAGMENTElements pFRAGMENT;
	private final PARAMElements pPARAM;
	private final XURLLiteralElements pXURLLiteral;
	private final XUnaryOperationElements pXUnaryOperation;
	private final XCastedColumnExpressionElements pXCastedColumnExpression;
	private final OpMultiElements pOpMulti;
	private final XLiteralElements pXLiteral;
	
	private final Grammar grammar;
	
	private final XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public XawGrammarAccess(GrammarProvider grammarProvider,
			XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pXaw = new XawElements();
		this.pXMethod = new XMethodElements();
		this.pTableLiteral = new TableLiteralElements();
		this.pTableColumn = new TableColumnElements();
		this.pInlineTableRow = new InlineTableRowElements();
		this.pTableRowLiteral = new TableRowLiteralElements();
		this.pXLocalTimeLiteral = new XLocalTimeLiteralElements();
		this.pMONTH = new MONTHElements();
		this.pXLocalDateLiteral = new XLocalDateLiteralElements();
		this.pHOST = new HOSTElements();
		this.pSEGMENT = new SEGMENTElements();
		this.pPATH = new PATHElements();
		this.pFRAGMENT = new FRAGMENTElements();
		this.pPARAM = new PARAMElements();
		this.pXURLLiteral = new XURLLiteralElements();
		this.pXUnaryOperation = new XUnaryOperationElements();
		this.pXCastedColumnExpression = new XCastedColumnExpressionElements();
		this.pOpMulti = new OpMultiElements();
		this.pXLiteral = new XLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("etablesaw.xtext.Xaw".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Xaw xbase::XBlockExpression:
	//	{Xaw} importSection=XImportSection?
	//	'xaw' qName=QualifiedName (expressions+=(XExpression | XVariableDeclaration) | methods+=XMethod)*;
	public XawElements getXawAccess() {
		return pXaw;
	}
	
	public ParserRule getXawRule() {
		return getXawAccess().getRule();
	}
	
	//XMethod:
	//	'def' returnType=JvmTypeReference? name=ID
	//	'(' (parameters+=FullJvmFormalParameter (',' parameters+=FullJvmFormalParameter)*)? ')'
	//	body=XExpression;
	public XMethodElements getXMethodAccess() {
		return pXMethod;
	}
	
	public ParserRule getXMethodRule() {
		return getXMethodAccess().getRule();
	}
	
	//// Table syntax
	//TableLiteral xbase::XBlockExpression:
	//	{TableLiteral}
	//	'#' (name=(ValidID | STRING) ':')? (expressions+=TableColumn (',' expressions+=TableColumn)*)?
	//	'#'
	//	expressions+=InlineTableRow*;
	public TableLiteralElements getTableLiteralAccess() {
		return pTableLiteral;
	}
	
	public ParserRule getTableLiteralRule() {
		return getTableLiteralAccess().getRule();
	}
	
	//// Column syntax
	//TableColumn xbase::XExpression:
	//	{TableColumn} (type=JvmTypeReference name=(ValidID | STRING) ('=' expression=XExpression)?);
	public TableColumnElements getTableColumnAccess() {
		return pTableColumn;
	}
	
	public ParserRule getTableColumnRule() {
		return getTableColumnAccess().getRule();
	}
	
	//// Row syntax
	//InlineTableRow xbase::XBlockExpression:
	//	{InlineTableRow} '|' (expressions+=XExpression (',' expressions+=XExpression)*)? '|';
	public InlineTableRowElements getInlineTableRowAccess() {
		return pInlineTableRow;
	}
	
	public ParserRule getInlineTableRowRule() {
		return getInlineTableRowAccess().getRule();
	}
	
	//TableRowLiteral xbase::XExpression:
	//	{TableRowLiteral} '#' '|' expressions+=XExpression (',' expressions+=XExpression)* '|' '#';
	public TableRowLiteralElements getTableRowLiteralAccess() {
		return pTableRowLiteral;
	}
	
	public ParserRule getTableRowLiteralRule() {
		return getTableRowLiteralAccess().getRule();
	}
	
	//XLocalTimeLiteral xbase::XExpression:
	//	{XLocalTimeLiteral} '@' hour=INT ':' min=INT (':' second=INT)?;
	public XLocalTimeLiteralElements getXLocalTimeLiteralAccess() {
		return pXLocalTimeLiteral;
	}
	
	public ParserRule getXLocalTimeLiteralRule() {
		return getXLocalTimeLiteralAccess().getRule();
	}
	
	//MONTH:
	//	INT | ID;
	public MONTHElements getMONTHAccess() {
		return pMONTH;
	}
	
	public ParserRule getMONTHRule() {
		return getMONTHAccess().getRule();
	}
	
	//// ("January" | "February" | "March" | "April" | "May" | "June" | "July" | "August" | "September" | "October" | "November" | "December");
	//XLocalDateLiteral xbase::XExpression:
	//	{XLocalDateLiteral} '@' day=INT '-' month=MONTH '-' year=INT;
	public XLocalDateLiteralElements getXLocalDateLiteralAccess() {
		return pXLocalDateLiteral;
	}
	
	public ParserRule getXLocalDateLiteralRule() {
		return getXLocalDateLiteralAccess().getRule();
	}
	
	//HOST:
	//	(ID | INT) ('.' (ID | INT))*;
	public HOSTElements getHOSTAccess() {
		return pHOST;
	}
	
	public ParserRule getHOSTRule() {
		return getHOSTAccess().getRule();
	}
	
	//SEGMENT:
	//	(ID | INT) ('.' (ID | INT))*;
	public SEGMENTElements getSEGMENTAccess() {
		return pSEGMENT;
	}
	
	public ParserRule getSEGMENTRule() {
		return getSEGMENTAccess().getRule();
	}
	
	//PATH:
	//	'/' (SEGMENT ('/' SEGMENT)*)?;
	public PATHElements getPATHAccess() {
		return pPATH;
	}
	
	public ParserRule getPATHRule() {
		return getPATHAccess().getRule();
	}
	
	//FRAGMENT:
	//	ID | INT;
	public FRAGMENTElements getFRAGMENTAccess() {
		return pFRAGMENT;
	}
	
	public ParserRule getFRAGMENTRule() {
		return getFRAGMENTAccess().getRule();
	}
	
	//PARAM:
	//	ID '=' (ID | INT);
	public PARAMElements getPARAMAccess() {
		return pPARAM;
	}
	
	public ParserRule getPARAMRule() {
		return getPARAMAccess().getRule();
	}
	
	//XURLLiteral xbase::XExpression hidden():
	//	{XURLLiteral} ('@' (url=STRING | (scheme=ID ':')? ('//' host=HOST? (':' port=INT)?)? path=PATH ('?' params+=PARAM ('&'
	//	params+=PARAM)*)? ('#' frag=FRAGMENT)?));
	public XURLLiteralElements getXURLLiteralAccess() {
		return pXURLLiteral;
	}
	
	public ParserRule getXURLLiteralRule() {
		return getXURLLiteralAccess().getRule();
	}
	
	//@Override
	//XUnaryOperation xbase::XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedColumnExpression;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return pXUnaryOperation;
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//XCastedColumnExpression xbase::XExpression:
	//	XCastedExpression (=> ({XCastedColumnExpression.target=current} 'of') type=JvmTypeReference)*;
	public XCastedColumnExpressionElements getXCastedColumnExpressionAccess() {
		return pXCastedColumnExpression;
	}
	
	public ParserRule getXCastedColumnExpressionRule() {
		return getXCastedColumnExpressionAccess().getRule();
	}
	
	//@Override
	//OpMulti:
	//	'*' | '**' | '/' | '%'
	//	| '?' // eval operator
	//;
	public OpMultiElements getOpMultiAccess() {
		return pOpMulti;
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//@Override
	//XLiteral xbase::XExpression:
	//	TableLiteral
	//	| TableRowLiteral
	//	| XLocalTimeLiteral | XLocalDateLiteral
	//	| XURLLiteral
	//	| XCollectionLiteral
	//	| XClosure
	//	| XBooleanLiteral
	//	| XNumberLiteral
	//	| XNullLiteral
	//	| XStringLiteral
	//	| XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return pXLiteral;
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XAnnotation:
	//	{XAnnotation}
	//	'@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '(' (elementValuePairs+=XAnnotationElementValuePair
	//	(',' elementValuePairs+=XAnnotationElementValuePair)*
	//	| value=XAnnotationElementValueOrCommaList)?
	//	')')?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}
	
	//XAnnotationElementValuePair:
	//	=> (element=[types::JvmOperation|ValidID] '=') value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}
	
	//XAnnotationElementValueOrCommaList xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueOrCommaListElements getXAnnotationElementValueOrCommaListAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueOrCommaListAccess();
	}
	
	public ParserRule getXAnnotationElementValueOrCommaListRule() {
		return getXAnnotationElementValueOrCommaListAccess().getRule();
	}
	
	//XAnnotationElementValue xbase::XExpression:
	//	=> ({xbase::XListLiteral} '#' '[') (elements+=XAnnotationOrExpression (',' elements+=XAnnotationOrExpression)*)? ']'
	//	| XAnnotationOrExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}
	
	//XAnnotationOrExpression xbase::XExpression:
	//	XAnnotation | XExpression;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationOrExpressionElements getXAnnotationOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXAnnotationOrExpressionAccess();
	}
	
	public ParserRule getXAnnotationOrExpressionRule() {
		return getXAnnotationOrExpressionAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	super::XUnaryOperation (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|super::OpMulti]) rightOperand=super::XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | super::XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']';
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')';
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}';
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')';
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}';
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true');
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null';
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')';
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//@Override
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	///**
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes,
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// */ StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
